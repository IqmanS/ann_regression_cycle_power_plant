# -*- coding: utf-8 -*-
"""Artificial Neural Network (Regression)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zskWxp-7eTTbp6JpRNyrddny4aeSGp1I

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_excel('Folds5x2_pp.xlsx')
X = dataset.iloc[:,:-1].values #Matrix Features (dataset.iloc[:,0:4])
y = dataset.iloc[:,-1].values #Dependent Variable Vector/Array

print(X)
print(y)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
#X_train : Matrix Features Training Set
#X_test : Matrix Features Test Set
#y_train : Dependent Variable Training Set
#y_test : Dependent Variable Test Set
X_train,X_test, y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units = 6,activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units = 6,activation='relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units = 1))
#for regression Activation Function of output layer is none

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer = 'adam',loss = 'mean_squared_error')

"""### Training the ANN model on the Training set"""

ann.fit(X_train,y_train,epochs=100,batch_size = 32)

"""### Predicting the results of the Test set"""

y_pre = ann.predict(X_test)
np.set_printoptions(precision = 2)
# y_pre.reshape(len(y_pre),1)
# y_test.reshape(len(y_test),1)
print(np.concatenate((y_pre.reshape(len(y_pre),1),
y_test.reshape(len(y_test),1)),1))
